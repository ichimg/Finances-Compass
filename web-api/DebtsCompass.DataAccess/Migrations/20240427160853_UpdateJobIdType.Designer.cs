// <auto-generated />
using System;
using DebtsCompass.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DebtsCompass.DataAccess.Migrations
{
    [DbContext(typeof(DebtsCompassDbContext))]
    [Migration("20240427160853_UpdateJobIdType")]
    partial class UpdateJobIdType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.Debt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("BorrowReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBorrowing")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EurExchangeRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("UsdExchangeRate")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.DebtAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeadlineReminderJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DebtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NonUserDebtAssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SelectedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DebtId");

                    b.HasIndex("NonUserDebtAssignmentId");

                    b.HasIndex("SelectedUserId");

                    b.ToTable("DebtAssignments");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EurExchangeRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UsdExchangeRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.ExpenseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f94d31eb-4302-4ee8-b955-8276cfe1e397"),
                            Name = "Food"
                        },
                        new
                        {
                            Id = new Guid("2fa22c16-5dd0-43dc-b195-51179ec1f6e9"),
                            Name = "Clothes"
                        },
                        new
                        {
                            Id = new Guid("8166888f-98c1-497f-a87b-9a462970307c"),
                            Name = "Invoices"
                        },
                        new
                        {
                            Id = new Guid("65dabea7-f1ee-4526-b1a8-61523e529c89"),
                            Name = "Rent"
                        },
                        new
                        {
                            Id = new Guid("814ec5b2-6abf-42dd-a6d1-ac3e200b1cdb"),
                            Name = "Car"
                        },
                        new
                        {
                            Id = new Guid("bda9afbb-0fc6-4e2c-b4d0-07f49a2b1cfc"),
                            Name = "Debts"
                        });
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.Friendship", b =>
                {
                    b.Property<string>("RequesterUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SelectedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequesterUserId", "SelectedUserId");

                    b.HasIndex("SelectedUserId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.Income", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EurExchangeRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UsdExchangeRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.IncomeCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IncomeCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d163b66a-31e7-4ffc-a251-72d6ede4fff0"),
                            Name = "Salary"
                        },
                        new
                        {
                            Id = new Guid("d37bda46-ac37-427c-a590-cd8a7ed069a2"),
                            Name = "Savings"
                        },
                        new
                        {
                            Id = new Guid("61b6d664-ecf8-4ea3-ac68-6e077aad272a"),
                            Name = "Debts"
                        });
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.NonUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NonUsers");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyPreference")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserInfoId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.DebtAssignment", b =>
                {
                    b.HasOne("DebtsCompass.Domain.Entities.Models.User", "CreatorUser")
                        .WithMany("CreatedDebts")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DebtsCompass.Domain.Entities.Models.Debt", "Debt")
                        .WithMany("DebtAssignments")
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DebtsCompass.Domain.Entities.Models.NonUser", "NonUser")
                        .WithMany()
                        .HasForeignKey("NonUserDebtAssignmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DebtsCompass.Domain.Entities.Models.User", "SelectedUser")
                        .WithMany("DebtsAssigned")
                        .HasForeignKey("SelectedUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatorUser");

                    b.Navigation("Debt");

                    b.Navigation("NonUser");

                    b.Navigation("SelectedUser");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.Expense", b =>
                {
                    b.HasOne("DebtsCompass.Domain.Entities.Models.ExpenseCategory", "Category")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DebtsCompass.Domain.Entities.Models.User", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.ExpenseCategory", b =>
                {
                    b.HasOne("DebtsCompass.Domain.Entities.Models.User", "User")
                        .WithMany("ExpenseCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.Friendship", b =>
                {
                    b.HasOne("DebtsCompass.Domain.Entities.Models.User", "RequesterUser")
                        .WithMany()
                        .HasForeignKey("RequesterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DebtsCompass.Domain.Entities.Models.User", "SelectedUser")
                        .WithMany()
                        .HasForeignKey("SelectedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequesterUser");

                    b.Navigation("SelectedUser");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.Income", b =>
                {
                    b.HasOne("DebtsCompass.Domain.Entities.Models.IncomeCategory", "Category")
                        .WithMany("Incomes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DebtsCompass.Domain.Entities.Models.User", "User")
                        .WithMany("Incomes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.IncomeCategory", b =>
                {
                    b.HasOne("DebtsCompass.Domain.Entities.Models.User", "User")
                        .WithMany("IncomeCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.User", b =>
                {
                    b.HasOne("DebtsCompass.Domain.Entities.Models.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.UserInfo", b =>
                {
                    b.HasOne("DebtsCompass.Domain.Entities.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.Debt", b =>
                {
                    b.Navigation("DebtAssignments");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.IncomeCategory", b =>
                {
                    b.Navigation("Incomes");
                });

            modelBuilder.Entity("DebtsCompass.Domain.Entities.Models.User", b =>
                {
                    b.Navigation("CreatedDebts");

                    b.Navigation("DebtsAssigned");

                    b.Navigation("ExpenseCategories");

                    b.Navigation("Expenses");

                    b.Navigation("IncomeCategories");

                    b.Navigation("Incomes");
                });
#pragma warning restore 612, 618
        }
    }
}
